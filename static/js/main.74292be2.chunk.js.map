{"version":3,"sources":["components/SubstitutionCipher.js","components/VigenereCipher.js","files/utils.js","components/HashFunction.js","components/LineBar.js","components/FrequencyGraph.js","components/SubstitutionCipherDescription.js","components/VigenereCipherDescription.js","components/HashFunctionDescription.js","App.js","reportWebVitals.js","index.js"],"names":["ALPHABET","split","SubstitutionCipher","plainText","onChange","useState","letterMapping","setLetterMapping","shuffle","letterMap","permutation","i","length","target","Math","floor","random","tmp","encrypt","map","c","join","useEffect","newMapping","className","type","onClick","align","Object","keys","key","values","value","name","e","autoComplete","placeholder","isograms","words","VigenereCipher","setKey","cipherText","offset","k_idx","charCodeAt","push","String","fromCharCode","isogram","toBinary","char","toString","binToHex","binary","parseInt","padFront","len","binaryArray","unshift","str","size","numBlocks","strArray","Array","s","substr","leftShift","amount","slice","OR","s1","s2","v","XOR","AND","ADD","b1","b2","MOD","K","HashFunction","iv","setIV","h0","h1","h2","h3","h4","messageDigestArray","ascii","messageDigest","chunked_MDA","chunk","cArr","w","f","k","a","b","d","j","temp","LineBar","props","x","width","y","textAnchor","fill","letters","id","height","frequency","FrequencyGraph","barGroups","l","transform","SubstitutionCipherDescription","style","color","VigenereCipherDescription","HashFunctionDescription","ciphers","App","setPlainText","setCipherText","loadMore","setLoadMore","cipherIdx","setCipherIdx","cipherTitle","cipher","description","year","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74292be2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\nfunction SubstitutionCipher({ plainText, onChange }) {\n  const [letterMapping, setLetterMapping] = useState({});\n\n  const shuffle = () => {\n    let letterMap = {};\n    let permutation = [...ALPHABET];\n    let i = 0;\n\n    for (i = 0; i < permutation.length - 1; i++) {\n      let target =\n        Math.floor(Math.random() * (permutation.length - (i + 1))) + i + 1;\n      let tmp = permutation[i];\n      permutation[i] = permutation[target];\n      permutation[target] = tmp;\n    }\n    for (i = 0; i < ALPHABET.length; i++) {\n      letterMap[ALPHABET[i]] = permutation[i];\n    }\n    return letterMap;\n  };\n\n  const encrypt = (plainText) => {\n    return plainText\n      .split(\"\")\n      .map((c) => (letterMapping[c] ? letterMapping[c] : c))\n      .join(\"\");\n  };\n\n  useEffect(() => {\n    const newMapping = shuffle();\n    setLetterMapping(newMapping);\n  }, []);\n\n  useEffect(() => {\n    onChange(plainText, encrypt(plainText));\n  }, [letterMapping]);\n\n  return (\n    <div>\n      <div className=\"description\">\n        <p>\n          The Substitution cipher takes plaintext 'm', and substitues each\n          character in the plaintext according to the key 'k'. The result is\n          ciphertext c.\n        </p>\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setLetterMapping(shuffle());\n          onChange(plainText, encrypt(plainText));\n        }}\n      >\n        Generate New Key\n      </button>\n      <table align=\"center\">\n        <tbody>\n          <tr>\n            {Object.keys(letterMapping).map((key) => (\n              <th key={key}>{key}</th>\n            ))}\n          </tr>\n          <tr>\n            {Object.values(letterMapping).map((value) => (\n              <td key={value}>{value}</td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n      <input\n        type=\"text\"\n        name=\"message\"\n        value={plainText}\n        onChange={(e) => onChange(e.target.value, encrypt(e.target.value))}\n        autoComplete=\"off\"\n        placeholder=\"Enter Plaintext\"\n      ></input>\n    </div>\n  );\n}\n\nexport default SubstitutionCipher;\n","import React, { useState, useEffect } from \"react\";\nimport isogramsJSON from \"../files/isograms.json\";\n\nconst isograms = isogramsJSON.words;\n\nfunction VigenereCipher({ plainText, onChange }) {\n  const [key, setKey] = useState(\"\");\n\n  const shuffle = () => {\n    var k = isograms[Math.floor(Math.random() * isograms.length)];\n    return k;\n  };\n\n  const encrypt = (plainText) => {\n    var cipherText = [];\n    var offset = 0;\n    for (var i = 0; i < plainText.length; i++) {\n      var c = plainText[i];\n      var k_idx = i - offset;\n      if (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122 && key !== \"\") {\n        cipherText.push(\n          String.fromCharCode(\n            ((c.charCodeAt(0) +\n              key[k_idx % key.length].charCodeAt(0) -\n              2 * 97) %\n              26) +\n              97\n          )\n        );\n      } else {\n        cipherText.push(c);\n        offset += 1;\n      }\n    }\n    return cipherText.join(\"\");\n  };\n\n  useEffect(() => {\n    const isogram = shuffle();\n    setKey(isogram);\n  }, []);\n\n  useEffect(() => {\n    onChange(plainText, encrypt(plainText));\n  }, [key]);\n\n  return (\n    <div>\n      <div className=\"description\">\n        <p>\n          The Vigenère cipher takes plaintext 'm', and shifts the i\n          <sup>th </sup>\n          character of m by (i mod len(k))<sup>th</sup> letter of the key 'k'.\n          This key is commonly an english word with no repeated letters. The\n          result is ciphertext c.\n        </p>\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setKey(shuffle());\n          onChange(plainText, encrypt(plainText));\n        }}\n      >\n        Generate New Key\n      </button>\n      <p>key: {key} </p>\n      <input\n        type=\"text\"\n        name=\"message\"\n        value={plainText}\n        onChange={(e) => onChange(e.target.value, encrypt(e.target.value))}\n        autoComplete=\"off\"\n        placeholder=\"Enter Plaintext\"\n      ></input>\n    </div>\n  );\n}\n\nexport default VigenereCipher;\n","// char -> ascii\nexport function charToASCII(char) {\n  return char.charCodeAt(0);\n}\n\n// ascii char -> binary\nexport function toBinary(char) {\n  return char.toString(2);\n}\n\n// binary -> hexadecimal\nexport function binToHex(binary) {\n  return parseInt(binary, 2).toString(16);\n}\n\n// pad front of binary with 0s to size len\nexport function padFront(binary, len) {\n  var binaryArray = binary.split(\"\");\n  while (binaryArray.length < len) {\n    binaryArray.unshift(\"0\");\n  }\n  return binaryArray.join(\"\");\n}\n\n// split string by size\nexport function split(str, size) {\n  var numBlocks = str.length / size;\n  var strArray = Array(numBlocks);\n\n  for (var i = 0, s = 0; i < numBlocks; ++i, s += size) {\n    strArray[i] = str.substr(s, size);\n  }\n  return strArray;\n}\n\n// cyclic leftshift of str by amount\nexport function leftShift(str, amount) {\n  return str.slice(amount) + str.slice(0, amount);\n}\n\n// bitwise OR\nexport function OR(s1, s2) {\n  return s1\n    .split(\"\")\n    .map((v, i) => parseInt(v, 2) | parseInt(s2[i], 2))\n    .join(\"\");\n}\n\n// bitwise XOR\nexport function XOR(s1, s2) {\n  return s1\n    .split(\"\")\n    .map((v, i) => parseInt(v, 2) ^ parseInt(s2[i], 2))\n    .join(\"\");\n}\n\n// bitwise AND\nexport function AND(s1, s2) {\n  return s1\n    .split(\"\")\n    .map((v, i) => parseInt(v, 2) & parseInt(s2[i], 2))\n    .join(\"\");\n}\n\n// bitwise NOT\nexport function NOT(str) {\n  return str\n    .split(\"\")\n    .map((v) => (v === \"0\" ? \"1\" : \"0\"))\n    .join(\"\");\n}\n\n// bitwise ADD\nexport function ADD(b1, b2) {\n  return (parseInt(b1, 2) + parseInt(b2, 2)).toString(2);\n}\n\n// binary string mod 2^32\nexport function MOD(str, len) {\n  while (str.length > len) {\n    str = str.slice(1);\n  }\n  return str;\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  charToASCII,\n  toBinary,\n  padFront,\n  split,\n  binToHex,\n  leftShift,\n  ADD,\n  OR,\n  XOR,\n  AND,\n  NOT,\n  MOD,\n} from \"./../files/utils\";\n\nconst IV_SIZE = 5;\nconst K = [\n  \"01011010100000100111100110011001\",\n  \"01101110110110011110101110100001\",\n  \"10001111000110111011110011011100\",\n  \"11001010011000101100000111010110\",\n];\n\nfunction HashFunction({ plainText, onChange }) {\n  const [iv, setIV] = useState([\n    \"01100111010001010010001100000001\",\n    \"11101111110011011010101110001001\",\n    \"10011000101110101101110011111110\",\n    \"00010000001100100101010001110110\",\n    \"11000011110100101110000111110000\",\n  ]);\n\n  const shuffle = () => {\n    const iv = [];\n    for (var i = 0; i < IV_SIZE; i++) {\n      iv.push([...Array(32)].map(() => Math.floor(Math.random() * 2)).join(\"\"));\n    }\n    return iv;\n  };\n\n  const encrypt = (plainText) => {\n    var h0 = iv[0];\n    var h1 = iv[1];\n    var h2 = iv[2];\n    var h3 = iv[3];\n    var h4 = iv[4];\n\n    // Preprocessing\n    var ascii_array = plainText.split(\"\").map((c) => charToASCII(c));\n    var messageDigestArray = ascii_array\n      .map((ascii) => toBinary(ascii))\n      .map((binary) => padFront(binary, 8));\n    var messageDigest = messageDigestArray.join(\"\");\n    messageDigest += \"1\";\n    while (messageDigest.length % 512 !== 448) {\n      messageDigest += \"0\";\n    }\n    messageDigest += padFront(toBinary(messageDigestArray.join(\"\").length), 64);\n\n    // Message Scheduling\n    var chunked_MDA = split(messageDigest, 512)\n      .map((chunk) => split(chunk, 32))\n      .map((cArr) => {\n        for (var i = 16; i < 80; i++) {\n          // w = cArr[i-3] | cArr[i-8] | cArr[i-14] | cArr[i-16];\n          var w = XOR(\n            XOR(XOR(cArr[i - 3], cArr[i - 8]), cArr[i - 14]),\n            cArr[i - 16]\n          );\n          w = leftShift(w, 1);\n          cArr.push(w);\n        }\n        return cArr;\n      });\n\n    // Main Loop\n    for (var i = 0; i < chunked_MDA.length; i++) {\n      var a = h0;\n      var b = h1;\n      var c = h2;\n      var d = h3;\n      var e = h4;\n      var f;\n      var k;\n\n      for (var j = 0; j < 80; j++) {\n        if (0 <= j && j <= 19) {\n          // f = (b and c) or ((not b) and d)\n          f = OR(AND(b, c), AND(NOT(b), d));\n          k = K[0];\n        } else if (20 <= j && j <= 39) {\n          // f = b xor c xor d\n          f = XOR(XOR(b, c), d);\n          k = K[1];\n        } else if (40 <= j && j <= 59) {\n          // f = (b and c) or (b and d) or (c and d)\n          f = OR(OR(AND(b, c), AND(b, d)), AND(c, d));\n          k = K[2];\n        } else if (60 <= j && j <= 79) {\n          // f = b xor c xor d\n          f = XOR(XOR(b, c), d);\n          k = K[3];\n        }\n        let w = chunked_MDA[i][j];\n        // temp = (a leftrotate 5) + f + e + k + w[i] mod 2^32\n        let temp = MOD(ADD(ADD(ADD(ADD(leftShift(a, 5), f), e), k), w), 32);\n        e = d;\n        d = c;\n        c = leftShift(b, 30);\n        b = a;\n        a = temp;\n      }\n      h0 = MOD(ADD(iv[0], a), 32);\n      h1 = MOD(ADD(iv[1], b), 32);\n      h2 = MOD(ADD(iv[2], c), 32);\n      h3 = MOD(ADD(iv[3], d), 32);\n      h4 = MOD(ADD(iv[4], e), 32);\n    }\n    return [h0, h1, h2, h3, h4].map((binary) => binToHex(binary)).join(\"\");\n  };\n\n  useEffect(() => {\n    onChange(plainText, encrypt(plainText));\n  }, [iv]);\n\n  return (\n    <div>\n      <div className=\"description\">\n        <p>\n          Secure Hashing Algorithm (SHA-1) is a cryptographic hash function\n          which takes plaintext 'm' as input, and outputs a fixed 160-bit\n          pseudorandom hash value. The result is the message disgest 'c'.\n        </p>\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setIV(shuffle());\n          onChange(plainText, encrypt(plainText));\n        }}\n      >\n        Generate New IV\n      </button>\n      <table align=\"center\">\n        <tbody>\n          <tr>\n            <th>\n              h<sub>0</sub>:\n            </th>\n            <td>0x{binToHex(iv[0])}</td>\n          </tr>\n          <tr>\n            <th>\n              h<sub>1</sub>:\n            </th>\n            <td>0x{binToHex(iv[1])}</td>\n          </tr>\n          <tr>\n            <th>\n              h<sub>2</sub>:\n            </th>\n            <td>0x{binToHex(iv[2])}</td>\n          </tr>\n          <tr>\n            <th>\n              h<sub>3</sub>:\n            </th>\n            <td>0x{binToHex(iv[3])}</td>\n          </tr>\n          <tr>\n            <th>\n              h<sub>4</sub>:\n            </th>\n            <td>0x{binToHex(iv[4])}</td>\n          </tr>\n        </tbody>\n      </table>\n      <input\n        type=\"text\"\n        name=\"message\"\n        value={plainText}\n        onChange={(e) => onChange(e.target.value, encrypt(e.target.value))}\n        autoComplete=\"off\"\n        placeholder=\"Enter Plaintext\"\n      ></input>\n    </div>\n  );\n}\n\nexport default HashFunction;\n","import React from \"react\";\n\nfunction LineBar(props) {\n  return (\n    <g>\n      <text x={props.width * 0.5} y=\"-8\" textAnchor=\"middle\" fill=\"#ffffff\">\n        {props.letters.id}\n      </text>\n      <rect\n        width={props.width - 1}\n        height={props.letters.frequency * 20}\n        fill=\"#5ea839\"\n      />\n    </g>\n  );\n}\nexport default LineBar;\n","import React from \"react\";\nimport LineBar from \"./LineBar.js\";\n\nfunction FrequencyGraph() {\n  const width = 800;\n  const height = 375;\n  const letters = [\n    { id: \"A\", frequency: 8.2 },\n    { id: \"B\", frequency: 1.5 },\n    { id: \"C\", frequency: 2.8 },\n    { id: \"D\", frequency: 4.3 },\n    { id: \"E\", frequency: 13 },\n    { id: \"F\", frequency: 2.2 },\n    { id: \"G\", frequency: 2 },\n    { id: \"H\", frequency: 6.1 },\n    { id: \"I\", frequency: 7 },\n    { id: \"J\", frequency: 0.15 },\n    { id: \"K\", frequency: 0.77 },\n    { id: \"L\", frequency: 4 },\n    { id: \"M\", frequency: 2.4 },\n    { id: \"N\", frequency: 6.7 },\n    { id: \"O\", frequency: 7.5 },\n    { id: \"P\", frequency: 1.9 },\n    { id: \"Q\", frequency: 0.095 },\n    { id: \"R\", frequency: 6 },\n    { id: \"S\", frequency: 6.3 },\n    { id: \"T\", frequency: 9.1 },\n    { id: \"U\", frequency: 2.8 },\n    { id: \"V\", frequency: 0.98 },\n    { id: \"W\", frequency: 2.4 },\n    { id: \"X\", frequency: 0.15 },\n    { id: \"Y\", frequency: 2 },\n    { id: \"Z\", frequency: 0.074 },\n  ];\n\n  let barGroups = letters.map((l, i) => (\n    <g transform={`translate(${i * 25}, 0)`}>\n      <LineBar letters={l} width={25} />\n    </g>\n  ));\n  return (\n    <svg className=\"freqContainer\" width={width} height={height}>\n      <g className=\"container\">\n        <text x={width / 2} y=\"30\" textAnchor=\"middle\" fill=\"#ffffff\">\n          English Letter Frequency (Texts)\n        </text>\n        <g className=\"chart\" transform=\"translate(100,80)\">\n          {barGroups}\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport default FrequencyGraph;\n","import React from \"react\";\nimport FrequencyGraph from \"./FrequencyGraph.js\";\n\nfunction SubstitutionCipherDescription() {\n  return (\n    <div>\n      <div>\n        <h1> Security </h1>\n        <div className=\"information\">\n          <p>\n            Totally <span style={{ color: \"red\" }}>insecure</span> against a\n            chosen-plaintext attack.\n          </p>\n          <h1> Cryptanalysis: Breaking substitution cipher </h1>\n          <h3> Trying exhaustive key search </h3>\n          <p>\n            Given a sufficient amount of ciphertext c, decrypt c using different\n            keys until the c decrypts to a sensible message.\n          </p>\n          <h2>\n            26! ≈ 2<sup>88</sup> possible keys!\n          </h2>\n          <p> (Exhaustive key searching is infeasible) </p>\n          <h3> Frequency Analysis </h3>\n          <p>\n            One can break the simple substitution cipher is by recognizing that\n            all letters are not equally common in English text.\n          </p>\n          <FrequencyGraph />\n          <p>\n            One way to solve an encrypted message c, if you know its language,\n            is to find a long text of the same language and classify each letter\n            by its frequency. Match the most occuring letter in c to highest\n            frequency letter, and repeat this process.\n          </p>\n          <p>\n            Note: Frequency analysis was first described by Al-Kindi 820 A.D.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SubstitutionCipherDescription;\n","import React from \"react\";\n\nfunction VigenereCipherDescription() {\n  return (\n    <div>\n      <div>\n        <h1> Security </h1>\n        <div className=\"information\">\n          <p>\n            Totally <span style={{ color: \"red\" }}>insecure</span> against a\n            known-plaintext attack.\n          </p>\n          <h1> Cryptanalysis: Breaking Vignère cipher </h1>\n          <p> Fun fact: This cipher was though to break for three centuries!</p>\n          <h2> Two steps to break the Vigenère cipher </h2>\n          <ol>\n            <li> Determine key length ℓ </li>\n            <li> Find the key </li>\n          </ol>\n          <h3> 1. Determining ℓ </h3>\n          <p> Begin by making a guess for ℓ. Check your guess as follows, </p>\n          <ul>\n            <li>\n              Divide ciphertext into ℓ groups, G<sub>0</sub>, G<sub>1</sub>,...,\n              G<sub>ℓ-1</sub>, placing the i<sup>th</sup> ciphertext letter in G\n              <sub>i mod ℓ</sub>\n            </li>\n            <li>\n              Determine the frequency distribution of letters in each G\n              <sub>i</sub>\n            </li>\n            <li>\n              If the distribution resembles the expected distribution of letters\n              in English text, then ℓ is likely correct\n            </li>\n          </ul>\n          <h3> 2. Find the key </h3>\n          <p>\n            Note that in each G<sub>i</sub> the ciphertext letters were obtained\n            by a cyclic shift of the alphabet corresponding to the plaintext\n            letters.\n          </p>\n          <ul>\n            <li>\n              Make a guess for the i<sup>th</sup> key word letter using the\n              frequency counts of ciphertext letters in G<sub>i</sub>\n            </li>\n            <li> Construct the guessed key word</li>\n            <li> Verify the key word by decrypting the ciphertext</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VigenereCipherDescription;\n","import React from \"react\";\n\nfunction HashFunctionDescription() {\n  return (\n    <div>\n      <div>\n        <h1> Security </h1>\n        <div className=\"information\">\n          <p>\n            A secure cryptographic hash function is a hash function that is\n            <span style={{ color: \"red\" }}> preimage</span>,\n            <span style={{ color: \"red\" }}> second preimage</span> and\n            <span style={{ color: \"red\" }}> collision</span> resistant.\n          </p>\n          <p>\n            Preimage resistance: Given y = H(x), it's computationally infeasible\n            to find any z such that H(z) = y\n          </p>\n          <p>\n            2nd preimage resistance: Given x, it's computationally infeasible to\n            find a y ≠ x, such that H(y)=H(x)\n          </p>\n          <p>\n            Collision resistance: It is computationally infeasible to find two\n            distinct x,y such that H(x) = H(y)\n          </p>\n          <h1>Theorems: Relationship between properties </h1>\n          <p>Collision resistance implies 2nd preimage resistance</p>\n          <p>2nd preimage resistance does not guarantee collision resistance</p>\n          <p>Collision resistance does not guarantee preimage resistance</p>\n          <h2> Generic hash function attacks </h2>\n          <h3> Finding Preimages </h3>\n          <p> Given y = H(x), repeatedly select distinct x' until H(x') = y </p>\n          <ul>\n            <li>\n              Expected number of steps is ≈ 2<sup>n</sup>\n            </li>\n            <li>Attack is infeasible if n ≥ 80</li>\n          </ul>\n          <h3> Finding Collisions </h3>\n          <p>\n            Repeatedly select arbitrary distinct x and store (H(x), x) in a\n            table sorted by first entry. Continue until a collision is found.\n          </p>\n          <ul>\n            <li>\n              Expected number of steps and space is √(π2<sup>n</sup>/2) ≈ √2\n              <sup>n</sup> (by birthday paradox)\n            </li>\n            <li>Attack is infeasible if n ≥ 160</li>\n          </ul>\n          <p>\n            Note: It is proven that these generic attacks for finding preimages\n            and collisions are optimal. That is, no better generic attacks\n            exist.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HashFunctionDescription;\n","import React, { useState } from \"react\";\n\nimport SubstitutionCipher from \"./components/SubstitutionCipher\";\nimport VigenereCipher from \"./components/VigenereCipher\";\nimport HashFunction from \"./components/HashFunction\";\n\nimport SubstitutionCipherDescription from \"./components/SubstitutionCipherDescription\";\nimport VigenereCipherDescription from \"./components/VigenereCipherDescription\";\nimport HashFunctionDescription from \"./components/HashFunctionDescription\";\n\nconst ciphers = [\n  \"Substitution Cipher\",\n  \"Vigenère Cipher\",\n  \"Hash Function (SHA-1)\",\n];\n\nfunction App() {\n  const [plainText, setPlainText] = useState(\"\");\n  const [cipherText, setCipherText] = useState(\"\");\n  const [loadMore, setLoadMore] = useState(false);\n  const [cipherIdx, setCipherIdx] = useState(0);\n\n  let cipherTitle = null;\n  let cipher = null;\n  let description = null;\n  let year = null;\n\n  const setCipher = () => {\n    cipherTitle = ciphers[cipherIdx];\n    if (cipherTitle === \"Substitution Cipher\") {\n      year = 1467;\n      cipher = (\n        <SubstitutionCipher\n          plainText={plainText}\n          onChange={(plainText, cipherText) => {\n            setPlainText(plainText);\n            setCipherText(cipherText);\n          }}\n          cipherText={cipherText}\n        />\n      );\n      description = <SubstitutionCipherDescription />;\n    } else if (cipherTitle === \"Vigenère Cipher\") {\n      year = 1553;\n      cipher = (\n        <VigenereCipher\n          plainText={plainText}\n          onChange={(plainText, cipherText) => {\n            setPlainText(plainText);\n            setCipherText(cipherText);\n          }}\n          cipherText={cipherText}\n        />\n      );\n      description = <VigenereCipherDescription />;\n    } else if (cipherTitle === \"Hash Function (SHA-1)\") {\n      year = 1995;\n      cipher = (\n        <HashFunction\n          plainText={plainText}\n          onChange={(plainText, cipherText) => {\n            setPlainText(plainText);\n            setCipherText(cipherText);\n          }}\n          cipherText={cipherText}\n        />\n      );\n      description = <HashFunctionDescription />;\n    }\n  };\n\n  setCipher(cipherIdx);\n\n  return (\n    <div className=\"wrap\">\n      <h1>\n        {cipherTitle} {year}\n      </h1>\n      {cipher}\n      <div className=\"ciphertext\">\n        <p>\n          {cipherTitle === \"Hash Function (SHA-1)\"\n            ? \"Message Digest\"\n            : \"Ciphertext\"}\n          : {cipherText}\n        </p>\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          loadMore ? setLoadMore(false) : setLoadMore(true);\n        }}\n      >\n        Learn More\n      </button>\n      {loadMore ? <div>{description}</div> : null}\n      <div>\n        <button\n          className=\"title\"\n          type=\"button\"\n          onClick={() => {\n            setLoadMore(false);\n            setCipherIdx((cipherIdx - 1 + ciphers.length) % ciphers.length);\n          }}\n        >\n          ⇦\n        </button>\n        <button\n          className=\"title\"\n          type=\"button\"\n          onClick={() => {\n            setLoadMore(false);\n            setCipherIdx((cipherIdx + 1) % ciphers.length);\n          }}\n        >\n          ⇨\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}